export interface ReleaseProduct {
    name: string;
    SKU: string;
    image: string;
    price: number | string;
    date?: string;
}

export interface InventoryItem {
    index?: string;
    name: string;
    sku: string;
    purchasePrice: number;
    size: string;
    marketPrice?: number;
    image?: string;
    category?: string;
    autoSync?: boolean;
}

export type Action = { label: string; value: string };

export type StoreState = {
    inventory: InventoryItem[];
    inventoryTotal: number;
}



// DataManager stuff
export type Settings = {
    stockxEmail: string;
    stockxPassword: string;
    goatEmail: string;
}

export type DataManager = {
    loadMemory(): void;
    getSettings(): Settings;
    setSetting(key: keyof Settings, value: string): void;
    loadStockxSales?(): Promise<void>;
    getInventory(): InventoryItem[];
    addInventoryItem(items: InventoryItem | InventoryItem[]): void;
    deleteInventoryItem(index: string): void;
}


// StockX Item Types
// Generated by https://quicktype.io
//
// To change quicktype's target language, run command:
//
//   "Set quicktype target language"

export interface StockXSearchResponse {
    Pagination: Pagination;
    Facets:     Facets;
    Products:   StockXProduct[];
}

export interface Facets {
    year:                           Year;
    brand:                          Brand;
    gender:                         Gender;
    dataType:                       DataType;
    releaseTime:                    { [key: string]: number };
    "market.featured":              MarketFeatured;
    productCategory:                ProductCategory;
    "market.lowestAsk":             { [key: string]: number };
    "market.highestBid":            { [key: string]: number };
    "market.volatility":            { [key: string]: number };
    "market.pricePremium":          { [key: string]: number };
    "market.deadstockSold":         { [key: string]: number };
    "market.changePercentage":      { [key: string]: number };
    "market.salesLast72Hours":      MarketSalesLast72Hours;
    "market.lastLowestAskTime":     { [key: string]: number };
    "market.lastHighestBidTime":    { [key: string]: number };
    "market.averageDeadstockPrice": { [key: string]: number };
}

export interface Brand {
    Jordan: number;
}

export interface DataType {
    product: number;
}

export interface Gender {
    men: number;
}

export interface MarketFeatured {
    "1": number;
}

export interface MarketSalesLast72Hours {
    "14": number;
}

export interface ProductCategory {
    sneakers: number;
}

export interface Year {
    "2018": number;
}

export interface Pagination {
    limit:        number;
    page:         number;
    total:        number;
    lastPage:     string;
    sort:         string[];
    order:        string[];
    currentPage:  string;
    nextPage:     null;
    previousPage: null;
}

export interface StockXProduct {
    id:                   string;
    uuid:                 string;
    brand:                string;
    breadcrumbs:          any[];
    category:             string;
    charityCondition:     number;
    childId:              null;
    colorway:             string;
    condition:            string;
    countryOfManufacture: null;
    dataType:             string;
    description:          null;
    hidden:               boolean;
    ipoDate:              null;
    minimumBid:           number;
    gender:               string;
    doppelgangers:        any[];
    media:                Media;
    name:                 string;
    productCategory:      string;
    releaseDate:          string;
    releaseTime:          number;
    belowRetail:          boolean;
    retailPrice:          number;
    shoe:                 string;
    shortDescription:     string;
    styleId:              string;
    tickerSymbol:         string;
    title:                string;
    traits:               Trait[];
    type:                 number;
    urlKey:               string;
    year:                 number;
    shoeSize:             null;
    market:               Market;
    _tags:                string[];
    lock_selling:         boolean;
    selling_countries:    string[];
    buying_countries:     string[];
    objectID:             string;
}

export interface Market {
    productId:                 number;
    skuUuid:                   null;
    productUuid:               string;
    lowestAsk:                 number;
    lowestAskSize:             string;
    parentLowestAsk:           number;
    numberOfAsks:              number;
    hasAsks:                   number;
    salesThisPeriod:           number | null;
    salesLastPeriod:           null;
    highestBid:                number;
    highestBidSize:            string;
    numberOfBids:              number;
    hasBids:                   number;
    annualHigh:                number;
    annualLow:                 number;
    deadstockRangeLow:         number;
    deadstockRangeHigh:        number;
    volatility:                number;
    deadstockSold:             number;
    pricePremium:              number;
    averageDeadstockPrice:     number;
    lastSale:                  number;
    lastSaleSize:              string;
    salesLast72Hours:          number | null;
    changeValue:               number;
    changePercentage:          number;
    absChangePercentage:       number;
    totalDollars:              number;
    updatedAt:                 number;
    lastLowestAskTime:         number;
    lastHighestBidTime:        number;
    lastSaleDate:              string;
    createdAt:                 string;
    deadstockSoldRank:         number;
    pricePremiumRank:          number;
    averageDeadstockPriceRank: number;
    featured:                  number | null;
}

export interface Media {
    imageUrl:      string;
    smallImageUrl: string;
    thumbUrl:      string;
    gallery:       string[];
    hidden:        boolean;
}

export interface Trait {
    name:       string;
    value:      number | string;
    filterable: boolean;
    visible:    boolean;
    highlight:  boolean;
    format?:    string;
}
